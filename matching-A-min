(* The goal is to characterize Cm and Ct for all values of r (coil losses), 
L (coil inductance) and f (frequency of operation) for the matching network
shown here: 
    http://www.phys.ufl.edu/~majewski/nqr/matching-A.pdf
*)

Clear[w,Z0,L,r,f,Z,Zform,ImZ,ReZ,CTminus,CTplus,CMminus,CMplus,CM,CT,rSlide,LSlide,wSlide,controlSliders,outs,disp,slideSize,zoomSlide];

(* This is how I arrived at expressions for CTminus and CMminus.
Uncomment this and removes semicolons obtain expressions for Cm and Ct
by enforcing ImZ=0 and ReZ = Zo *)
(*Z=1/(I*CM*w)+1/(I*CT*w+1/(r+I*L*w));Zform=ComplexExpand[Z];ReZ=r/((L^2*w^2+r^2)*((CT*w-(L*w)/(L^2*w^2+r^2))^2+r^2/(L^2*w^2+r^2)^2));ImZ=-(1/(CM*w))-(CT*w)/((CT*w-(L*w)/(L^2*w^2+r^2))^2+r^2/(L^2*w^2+r^2)^2)+(L*w)/((L^2*w^2+r^2)*((CT*w-(L*w)/(L^2*w^2+r^2))^2+r^2/(L^2*w^2+r^2)^2));
Solve[ReZ\[Equal]Z0,CT];
Solve[ImZ\[Equal]0,CM];*)

CTminus=
    Dynamic[
        (1.*(L*w^2*Z0-Sqrt[L^2*r*w^4*Z0+r^3*w^2*Z0-r^2*w^2*Z0^2]))/(L^2*w^4*Z0+r^2*w^2*Z0)
    ];(*defines the tuning cap value*)

(* CTplus is thrown out because the quadratic leads to nonsense for the plus sign *)
(*CTplus=Dynamic[(Sqrt[L^2*r*w^4*Z0+r^3*w^2*Z0-r^2*w^2*Z0^2]+L*w^2*Z0)/(L^2*w^4*Z0+r^2*w^2*Z0)];*)
	
CMminus=
    Dynamic[
         (1.*((2*L*w^2*(L*w^2*Z0-Sqrt[L^2*r*w^4*Z0+r^3*w^2*Z0-r^2*w^2*Z0^2]))/(L^2*w^4*Z0+r^2*w^2*Z0)-(r^2*w^2*(L*w^2*Z0-Sqrt[L^2*r*w^4*Z0+r^3*w^2*Z0-r^2*w^2*Z0^2])^2)/(L^2*w^4*Z0+r^2*w^2*Z0)^2-(L^2*w^4*(L*w^2*Z0-Sqrt[L^2*r*w^4*Z0+r^3*w^2*Z0-r^2*w^2*Z0^2])^2)/(L^2*w^4*Z0+r^2*w^2*Z0)^2-1))/(w^2*((r^2*(L*w^2*Z0-Sqrt[L^2*r*w^4*Z0+r^3*w^2*Z0-r^2*w^2*Z0^2]))/(L^2*w^4*Z0+r^2*w^2*Z0)+(L^2*w^2*(L*w^2*Z0-Sqrt[L^2*r*w^4*Z0+r^3*w^2*Z0-r^2*w^2*Z0^2]))/(L^2*w^4*Z0+r^2*w^2*Z0)-L))]; (*defines the matching cap value*)

(* also discarded is CMplus*)(*CMplus=Dynamic[((2*L*w^2*(Sqrt[L^2*r*w^4*Z0+r^3*w^2*Z0-r^2*w^2*Z0^2]+L*w^2*Z0))/(L^2*w^4*Z0+r^2*w^2*Z0)-(r^2*w^2*(Sqrt[L^2*r*w^4*Z0+r^3*w^2*Z0-r^2*w^2*Z0^2]+L*w^2*Z0)^2)/(L^2*w^4*Z0+r^2*w^2*Z0)^2-(L^2*w^4*(Sqrt[L^2*r*w^4*Z0+r^3*w^2*Z0-r^2*w^2*Z0^2]+L*w^2*Z0)^2)/(L^2*w^4*Z0+r^2*w^2*Z0)^2-1)/(w^2*((r^2*(Sqrt[L^2*r*w^4*Z0+r^3*w^2*Z0-r^2*w^2*Z0^2]+L*w^2*Z0))/(L^2*w^4*Z0+r^2*w^2*Z0)+(L^2*w^2*(Sqrt[L^2*r*w^4*Z0+r^3*w^2*Z0-r^2*w^2*Z0^2]+L*w^2*Z0))/(L^2*w^4*Z0+r^2*w^2*Z0)-L))];*)

f=Dynamic[w/6.28319]; (*convert angular frequency to MHz*)
fcheck={"f  = "*Dynamic[f]};
Q=Dynamic[((1.*L)*w)/r]; (*declarations of Q, dynamic frequency output, slider objects*)

zoomSlide={
    Slider[
        Dynamic[slideSize],{20,4000,10}
        ],
    "slideSize = "Dynamic[slideSize]
}; (*a slider to control slideSize*)

slideSize=1700; (* decalreinitial slider size for controls*)

wSlide={
    Slider[
        Dynamic[w],{10^6,0.2001*10^9,0.001*10^6},ImageSize->slideSize
    ],
    "w =  "Dynamic[w]
};

LSlide={
    Slider[
        Dynamic[L],{0.2/10^6,50/10^6,(1.*1.000001)/10^7},ImageSize->slideSize
        ],
    "L =   "Dynamic[L]
};

rSlide={
    Slider[
        Dynamic[r],{0.001,20,0.001},ImageSize->slideSize
        ],
    "r =   "Dynamic[r]
};

zoSlide={
    Slider[Dynamic[Z0],{1,300,1},ImageSize->Dynamic[slideSize]
        ],
    "Z0 =   "Dynamic[Z0]
};

controlSliders={
    zoomSlide,wSlide,LSlide,rSlide,Z0Slide
}; (*controls and outputs*)
outs={
    "tunecap=",Tminus,"matchcap=",Mminus,"Q=",Q
};

r=7.00; (*decale initial values*)
Z0=50.00;
L=26.00/10^6;
w=2.00*10^7;
disp=Flatten[{controlSliders,outs}]; (* this is the display *)
disp 
